package com.ashwani.springbootdemo.springbootappdemo1;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

//This class is generated by the spring initializer which contains the main method and from here the flow of spring boot application begins



/*  Best Practice is to keep your application class in root package above all other packages. this allows us to leverage default component scanning and then no need to explicitly give the basePackage
Ex:  Springbootappdemo1Application class in package com.ashwani.springbootdemo.springbootappdemo1, 
so the component scanning will follow through all the subPackages com.ashwani.springbootdemo.springbootappdemo1.*

However if we have different packages like com.anjani.entities, com.neelam.soapservices etc which does not fall under root package,
then in that case we have to explicitly mention the basePackages along with the @SpringBootApplication annotation as:
@SpringBootApplication(scanBasePackages={com.anjani.entities, com.neelam.soapservices })     */

/*   It enables autoConfiguration, componentScan and Other configurations. So it is basically composed up of many annotations which are: 
@EnableAutoConfiguration, @Configuration, @ComponentScan    */
@SpringBootApplication
public class Springbootappdemo1Application {

	public static void main(String[] args) {
		SpringApplication.run(Springbootappdemo1Application.class, args); 
		/*   SpringApplication class's run method is used for Booting a spring boot app. Behind the scene:
		 *  It creates application context, 
		 *  registers all beans and 
		 *  starts the embedded server    */
	}

}
